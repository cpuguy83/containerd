ARG GO_VERSION=1.16.4
ARG GO_IMAGE=golang:${GO_VERSION}
FROM --platform=$BUILDPLATFORM $GO_IMAGE AS go


FROM --platform=$BUILDPLATFORM ubuntu:18.04 AS base
ARG TARGETOS
ARG TARGETARCH
ARG TARGETVARIANT
ARG BUILDPLATFORM
ARG TARGETPLATFORM
SHELL ["/bin/bash", "-xec"]
RUN if [ ! "$TARGETARCH" = "amd64" ] && [ ! "$TARGETPLATFORM" = "$BUILDPLATFORM" ]; then \
		echo deb [arch=$(dpkg --print-architecture)] http://archive.ubuntu.com/ubuntu/ bionic main multiverse restricted universe > /etc/apt/sources.list; \
		echo deb [arch=$(dpkg --print-architecture)] http://archive.ubuntu.com/ubuntu/ bionic-updates main multiverse restricted universe >> /etc/apt/sources.list; \
		echo deb [arch=$(dpkg --print-architecture)] http://security.ubuntu.com/ubuntu/ bionic-security main multiverse restricted universe >> /etc/apt/sources.lis; \
		echo deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports/ bionic main multiverse restricted universe >> /etc/apt/sources.list; \
		echo deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports/ bionic-updates main multiverse restricted universe >> /etc/apt/sources.list; \
		dpkg --add-architecture "$TARGETARCH"; \
	fi
RUN	apt-get update && apt-get install -y \
	binutils-mingw-w64 \
	crossbuild-essential-arm64 \
	g++-mingw-w64-x86-64 \
	git \
	pkg-config \
	btrfs-progs:${TARGETARCH} \
	libseccomp-dev:${TARGETARCH}
ENV PATH=/usr/local/go/bin:$PATH
ENV CGO_ENABLED=1
ENV GOOS=$TARGETOS
ENV GOARCH=$TARGETARCH
ENV GOPATH=/go
COPY --from=go /usr/local/go /usr/local/go

FROM base AS base-arm64
ENV CC=aarch64-linux-gnu-gcc
RUN \
	PKG_CONFIG_PATH="$(pkg-config --variable pc_path pkg-config)"; \
    for i in $(find /usr/lib -name 'pkgconfig'); do \
      PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:$i"; \
    done; \
    echo export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}" > /tmp/pkgconfig

FROM base AS base-amd64

FROM base-${TARGETARCH}${TARGETVARIANT} AS base-target
COPY . /go/src/github.com/containerd/containerd
WORKDIR /go/src/github.com/containerd/containerd
RUN make release cri-release cri-cni-release

FROM base-target AS containerd
RUN \
	[ -f /tmp/pkgconfig ] && . /tmp/pkgconfig; \
	make binaries; \
	rm bin/containerd-stress*

FROM base-target AS runc
ENV RUNC_FLAVOR=runc
RUN script/setup/install-runc

FROM base-target AS cni
RUN script/setup/install-cni

FROM scratch AS release
COPY --from=base-target /go/src/github.com/containerd/containerd/releases/ /
